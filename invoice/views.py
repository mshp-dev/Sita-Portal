from django.shortcuts import render, redirect, get_object_or_404
from django.utils import timezone
from django.contrib.auth.decorators import login_required
from django.http.response import JsonResponse
from django.template.loader import render_to_string

from core.models import IscUser, MftUser, Directory, Permission, DirectoryPermissionCode, BusinessCode, CustomerBank, OperationBusiness
from .models import *

from jdatetime import datetime as jdt

import logging

logger = logging.getLogger(__name__)


@login_required(login_url='/login/')
def invoice_create_view(request, *args, **kwargs):
    isc_user = IscUser.objects.get(user=request.user)
    
    # try:
    #     uid = int(request.GET.get('user'))
    #     tid = int(request.GET.get('type'))
    #     bid = int(request.GET.get('bus'))
    # except Exception as e:
    #     print(e)
    #     logger.warning(f' {isc_user.user.username} tryed to access on {request.path} without proper kwargs.')
    #     return redirect('/error/400/')
    # mftuser = get_object_or_404(MftUser, pk=uid)
    # itype = get_object_or_404(InvoiceType, pk=tid)
    # bus = get_object_or_404(BusinessCode, pk=bid)
    # bus_dirs = []
    # user_accesses = []

    # if not isc_user.user.is_staff and not CustomerBank.objects.filter(user=isc_user, access_on_bic=mftuser.organization).exists() and not OperationBusiness.objects.filter(user=isc_user, access_on_bus__in=mftuser.business.all()).exists():
    #     logger.fatal(f'unauthorized trying access of {isc_user.user.username} to {request.path}.')
    #     return redirect('/error/401/')

    if request.is_ajax():
        if request.method == 'POST':
            invoice_type = InvoicType.objects.get(code=request.GET.get('type'))
            if invoice_type == 'INVDIR':
                dirs = Directory.objects.filter(created_by=isc_user, is_confirmed=False)
                invoice = PreInvoice(
                    invoice_type=invoice_type,
                    directories_list='',
                    created_by=isc_user
                )
                invoice.save()
                if itype.code == 'USEDBUSINESS':
                    invoice.used_business = bid
                    invoice.save()
                logger.info(f'invoice with serial number {invoice.serial_number} generated by {isc_user.user.username}.')
                response = {
                    'result': 'success',
                    'invoice_number': invoice.serial_number,
                    'jdate': jdt.now().strftime('%Y/%m/%d'),
                    'counter': Invoice.objects.filter(mftuser=uid).count()
                }
            return JsonResponse(data=response, safe=False)

    bus_dirs = Directory.objects.filter(business=bus).order_by('relative_path')
    permissions = Permission.objects.filter(user=mftuser, permission__in=[1, 2, 32, 4]).order_by('directory__relative_path')
    if itype.code == 'USEDBUSINESS':
        permissions = permissions.filter(directory__in=bus_dirs)
    elif itype.code == 'OWNEDBUSINESS':
        permissions = permissions.exclude(directory__in=bus_dirs)
    
    directory_ids = [p['directory'] for p in permissions.values('directory').distinct()]
    for dir_ in Directory.objects.filter(id__in=directory_ids):
        perms = permissions.filter(directory=dir_)
        perms_str = ''
        for p in perms:
            perms_str += f'{DirectoryPermissionCode.objects.get(value=p.permission)}ØŒ '
        user_accesses.append({'dir': dir_.relative_path, 'perms': perms_str[:-2]})

    context = {
        'username': str(isc_user.user.username),
        'access': str(isc_user.role.code),
        'mftuser': mftuser,
        'user_accesses': user_accesses
    }
    
    return render(request, 'invoice/invoice-create.html', context)


@login_required(login_url="/login/")
def invoices_list_view(request, *args, **kwargs):
    isc_user = IscUser.objects.get(user=request.user)
    invoices = []

    if str(isc_user.role.code) == 'ADMIN':
        invoices = Invoice.objects.all()
    else:
        invoices = Invoice.objects.filter(created_by=isc_user).order_by('created_at')

    context = {
        'username': str(isc_user.user.username),
        'access': str(isc_user.role.code),
        'invoices': invoices
    }
    
    if request.is_ajax():
        query = request.GET.get('q')
        filtered_invoices = list(invoice for invoice in context['invoices'] if query in invoice.get_mftuser.username or query in invoice.get_mftuser.alias or query in invoice.get_mftuser.organization.description) # or query in user.business.description
        context['users'] = filtered_invoices
        html = render_to_string(
            template_name="includes/invoice-list.html", context=context
        )
        data_dict = {"html_from_view": html}
        return JsonResponse(data=data_dict, safe=False)
    
    return render(request, "invoice/invoices-list.html", context)

