from django.shortcuts import render, redirect, get_object_or_404
from django.utils import timezone
from django.contrib.auth.decorators import login_required
from django.http.response import JsonResponse
from django.template.loader import render_to_string

from core.models import IscUser, MftUser, Directory, Permission, DirectoryPermissionCode, BusinessCode, CustomerBank, OperationBusiness
from .models import *

from jdatetime import datetime as jdt

import logging

logger = logging.getLogger(__name__)


@login_required(login_url='/login/')
def invoice_create_view(request, *args, **kwargs):
    isc_user = IscUser.objects.get(user=request.user)
    invoice = None
    invoice_type = None
    mftuser = None

    if request.is_ajax():
        if request.method == 'POST':
            try:
                invoice_type = InvoiceType.objects.get(code=request.POST.get('type'))
                if invoice_type.code == 'INVDIR':
                    # dirs = Directory.objects.filter(created_by=isc_user, is_confirmed=False).values('id')
                    dirs_str = request.POST.get('dirs')
                    # for d in dirs:
                    #     dirs_str += f'{str(d["id"])},'
                    invoice = PreInvoice(
                        invoice_type=invoice_type,
                        directories_list=dirs_str,
                        created_by=isc_user
                    )
                    invoice.save()
                else:
                    mftuser = MftUser.objects.get(pk=request.POST.get('mftuser'))
                    invoice = Invoice(
                        invoice_type=invoice_type,
                        mftuser=mftuser,
                        used_business=int(request.POST.get('ubus')) if invoice_type.code == 'INVUBUS' else 0,
                        created_by=isc_user
                    )
                    invoice.save()
                
                logger.info(f'invoice with serial number {invoice.serial_number} generated by {isc_user.user.username}.')
                response = {
                    'result': 'success',
                    'invoice_id': invoice.id
                }
            except Exception as e:
                logger.info(f'creating invoice encountered error.')
                logger.error(e)
                status_code = 400
                response = {'result': 'error'}
            finally:
                return JsonResponse(data=response, safe=False)


@login_required(login_url='/login/')
def invoice_delete_view(request, iid, *args, **kwargs):
    isc_user = IscUser.objects.get(user=request.user)

    if request.is_ajax():
        if request.method == 'POST':
            invoice = None
            invoice_type = InvoiceType.objects.get(code=request.POST.get('itype'))
            if invoice_type.code == 'INVDIR':
                invoice = PreInvoice.objects.get(pk=iid)
            else:
                invoice = Invoice.objects.get(pk=iid)
            if invoice.created_by == isc_user or isc_user.role.code == 'ADMIN':
                response = {
                    'result': 'success',
                    'type': 'pre' if invoice_type.code == 'INVDIR' else '',
                    'deleted': invoice.id
                }
                invoice.delete()
            else:
                logger.critical(f'unauthorized trying delete of invoice with serial number {invoice.serial_number} by {isc_user.user.username}.')
                response = {
                    'result': 'error',
                    'message': 'شما مجاز به انجام این کار نیستید'
                }
            return JsonResponse(data=response, safe=False)


@login_required(login_url='/login/')
def invoice_details_view(request, iid, *args, **kwargs):
    isc_user = IscUser.objects.get(user=request.user)
    invoice = Invoice.objects.get(pk=iid)
    mftuser = MftUser.objects.get(pk=invoice.mftuser)
    ubus = invoice.get_used_business()
    bus_dirs = []
    user_accesses = []

    if not isc_user.user.is_staff and not OperationBusiness.objects.filter(user=isc_user, access_on_bus__in=mftuser.business.all()).exists():
        logger.fatal(f'unauthorized trying access of {isc_user.user.username} to {request.path}.')
        return redirect('/error/401/')

    if request.is_ajax():
        if request.method == 'POST':
            invoice_type = InvoicType.objects.get(code=request.POST.get('type'))
            if invoice_type.code == 'INVDIR':
                dirs = Directory.objects.filter(created_by=isc_user, is_confirmed=False).values('id')
                dirs_str = ''
                for d in dirs:
                    dirs_str += f'{str(d["id"])},'
                invoice = PreInvoice(
                    invoice_type=invoice_type,
                    directories_list=dirs_str,
                    created_by=isc_user
                )
                invoice.save()
            else:
                mftuser = MftUser.objects.get(pk=request.POST.get('mftuser'))
                invoice = Invoice(
                    invoice_type=invoice_type,
                    mftuser=mftuser,
                    used_business=request.POST.get('ubus') if invoice_type.code == 'INVUBUS' else 0,
                    created_by=isc_user
                )
                invoice.save()
            
            logger.info(f'invoice with serial number {invoice.serial_number} generated by {isc_user.user.username}.')
            response = {
                'result': 'success',
                'invoice_number': invoice.serial_number
            }
            return JsonResponse(data=response, safe=False)

    if ubus:
        bus_dirs = Directory.objects.filter(business=ubus).order_by('relative_path')
    else:
        bus_dirs = Directory.objects.filter(business__in=mftuser.business.all()).order_by('relative_path')
    
    permissions = Permission.objects.filter(user=mftuser, directory__in=bus_dirs, permission__in=[1, 2, 32, 4]).order_by('directory__relative_path')
    
    directory_ids = [p['directory'] for p in permissions.values('directory').distinct()]
    for dir_ in Directory.objects.filter(id__in=directory_ids):
        perms = permissions.filter(directory=dir_)
        perms_str = ''
        for p in perms:
            perms_str += f'{DirectoryPermissionCode.objects.get(value=p.permission)}، '
        user_accesses.append({'dir': dir_.relative_path, 'perms': perms_str[:-2]})

    context = {
        'username': str(isc_user.user.username),
        'access': str(isc_user.role.code),
        'invoice': invoice,
        'user_accesses': user_accesses
    }
    
    return render(request, 'invoice/invoice-details.html', context)


@login_required(login_url="/login/")
def invoices_list_view(request, *args, **kwargs):
    isc_user = IscUser.objects.get(user=request.user)
    invoices = []
    pre_invoices = []

    if str(isc_user.role.code) == 'ADMIN':
        invoices = Invoice.objects.all().order_by('created_at')
        pre_invoices = PreInvoice.objects.all().order_by('created_at')
    else:
        invoices = Invoice.objects.filter(created_by=isc_user).order_by('created_at')
        pre_invoices = PreInvoice.objects.filter(created_by=isc_user).order_by('created_at')

    context = {
        'username': str(isc_user.user.username),
        'access': str(isc_user.role.code),
        'invoices': invoices,
        'pre_invoices': pre_invoices
    }
    
    if request.is_ajax():
        if request.method == 'GET':
            query = request.GET.get('q')
            filtered_invoices = list(invoice for invoice in context['invoices'] if query in invoice.get_mftuser.username or query in invoice.get_mftuser.alias or query in invoice.get_mftuser.organization.description) # or query in user.business.description
            context['users'] = filtered_invoices
            html = render_to_string(
                template_name="includes/invoice-list.html", context=context
            )
            data_dict = {"html_from_view": html}
            return JsonResponse(data=data_dict, safe=False)
    
    return render(request, "invoice/invoices-list.html", context)

